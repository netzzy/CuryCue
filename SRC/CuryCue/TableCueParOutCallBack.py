# me - this DAT
# scriptOp - the OP which is cooking
#
# press 'Setup Parameters' in the OP to call this function to re-create the parameters.

# called whenever custom pulse parameter is pushed
def onPulse(par):
	return

def onCook(scriptOp):
	if hasattr(parent.curycue.ext, "CuryCueClass"): 	
		scriptOp.clear()
		
		if int(scriptOp.par.Cueid) in parent.curycue.LocalCueDataByID:
			myCue=parent.curycue.LocalCueDataByID[int(scriptOp.par.Cueid)]
			myPars=myCue.pars_float
			for myPar in myPars:
				if myPar.id!=-1:
					if myPar.par_text_value is None or myPar.par_text_value=='':
						myValue="%g" % myPar.par_value
					else:
						myValue=myPar.par_text_value
					

					scriptOp.appendRow([myPar.id, myPar.id_fixture,myCue.id, parent.curycue.LocalFixturesByID[myPar.id_fixture].order, 
					parent.curycue.LocalFixturesByID[myPar.id_fixture].name, myPar.par_name, 
					myValue, "%g" % myPar.fade_in, "%g" % myPar.delay_in, myPar.full_par_path])

	return

def onSetupParameters(scriptOp):
	"""Auto-generated by Component Editor"""
	# manual changes to anything other than parJSON will be	# destroyed by Comp Editor unless doc string above is	# changed

	TDJSON = op.TDModules.mod.TDJSON
	parJSON = """
	{
		"Settings": {
			"Cueid": {
				"name": "Cueid",
				"label": "Cue id",
				"page": "Settings",
				"style": "Int",
				"size": 1,
				"default": 0,
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"min": 0.0,
				"max": 1.0,
				"normMin": 0.0,
				"normMax": 1.0,
				"clampMin": false,
				"clampMax": false
			}
		}
	}
	"""
	parData = TDJSON.textToJSON(parJSON)
	TDJSON.addParametersFromJSONOp(scriptOp, parData, destroyOthers=True)